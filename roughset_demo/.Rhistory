cls
getwd()
setwd("/Users/hongong/OneDrive - KNOREX/sma_2017/roughset_demo/")
install.packages("RoughSets")
install.packages("RoughSets")
install.packages("~/Downloads/RoughSets-master.zip", repos = NULL, type = "win.binary")
library(RoughSets)
confusionMatrix(pred.vals, true.classes)
library(RoughSets)
###########################################################
## Example
##############################################################
library(RoughSets)
library(caret)
# get data file name argument
args <- commandArgs(TRUE)
data_name <- as.character(args[1])
# loading data to data frame
wine.data <- read.csv(data_name)
wine.data
## Split the data into a training set and a test set,
## 60\% for training and 40\% for testing:
idx <- round(0.8 * nrow(wine.data))
wine.tra <-SF.asDecisionTable(wine.data[1:idx,],
decision.attr = 5)
wine.tst <- SF.asDecisionTable(wine.data[(idx+1):nrow(wine.data), -ncol(wine.data)])
true.classes <- wine.data[(idx+1):nrow(wine.data), ncol(wine.data)]
## discretization:
cut.values <- D.discretize.equal.intervals.RST(wine.tra, nOfIntervals = 4)
data.tra <- SF.applyDecTable(wine.tra, cut.values)
data.tst <- SF.applyDecTable(wine.tst, cut.values)
## rule induction from the training set:
rules <- RI.LEM2Rules.RST(data.tra)
rules
## predicitons for the test set:
pred.vals <- predict(rules, data.tst)
## checking the accuracy of predictions:
#mean(pred.vals == true.classes)
confusionMatrix(pred.vals, true.classes)
###########################################################
## Example
##############################################################
library(RoughSets)
library(caret)
# get data file name argument
args <- commandArgs(TRUE)
data_name <- as.character(args[1])
# loading data to data frame
wine.data <- read.csv(data_name)
wine.data
## Split the data into a training set and a test set,
## 60\% for training and 40\% for testing:
idx <- round(0.8 * nrow(wine.data))
wine.tra <-SF.asDecisionTable(wine.data[1:idx,],
decision.attr = 5)
wine.tst <- SF.asDecisionTable(wine.data[(idx+1):nrow(wine.data), -ncol(wine.data)])
true.classes <- wine.data[(idx+1):nrow(wine.data), ncol(wine.data)]
## discretization:
cut.values <- D.discretize.equal.intervals.RST(wine.tra, nOfIntervals = 4)
data.tra <- SF.applyDecTable(wine.tra, cut.values)
data.tst <- SF.applyDecTable(wine.tst, cut.values)
## rule induction from the training set:
rules <- RI.LEM2Rules.RST(data.tra)
rules
## predicitons for the test set:
pred.vals <- predict(rules, data.tst)
## checking the accuracy of predictions:
#mean(pred.vals == true.classes)
confusionMatrix(pred.vals, true.classes)
###########################################################
## Example
##############################################################
library(RoughSets)
library(caret)
# get data file name argument
args <- commandArgs(TRUE)
data_name <- as.character(args[1])
# loading data to data frame
wine.data <- read.csv(data_name)
wine.data
## Split the data into a training set and a test set,
## 60\% for training and 40\% for testing:
idx <- round(0.8 * nrow(wine.data))
wine.tra <-SF.asDecisionTable(wine.data[1:idx,],
decision.attr = 5)
wine.tst <- SF.asDecisionTable(wine.data[(idx+1):nrow(wine.data), -ncol(wine.data)])
true.classes <- wine.data[(idx+1):nrow(wine.data), ncol(wine.data)]
## discretization:
cut.values <- D.discretize.equal.intervals.RST(wine.tra, nOfIntervals = 4)
data.tra <- SF.applyDecTable(wine.tra, cut.values)
data.tst <- SF.applyDecTable(wine.tst, cut.values)
## rule induction from the training set:
rules <- RI.LEM2Rules.RST(data.tra)
rules
## predicitons for the test set:
pred.vals <- predict(rules, data.tst)
## checking the accuracy of predictions:
#mean(pred.vals == true.classes)
confusionMatrix(pred.vals, true.classes)
###########################################################
## Example
##############################################################
library(RoughSets)
library(caret)
# get data file name argument
args <- commandArgs(TRUE)
data_name <- as.character(args[1])
# loading data to data frame
wine.data <- read.csv(data_name)
wine.data
## Split the data into a training set and a test set,
## 60\% for training and 40\% for testing:
idx <- round(0.8 * nrow(wine.data))
wine.tra <-SF.asDecisionTable(wine.data[1:idx,],
decision.attr = 5)
wine.tst <- SF.asDecisionTable(wine.data[(idx+1):nrow(wine.data), -ncol(wine.data)])
true.classes <- wine.data[(idx+1):nrow(wine.data), ncol(wine.data)]
## discretization:
cut.values <- D.discretize.equal.intervals.RST(wine.tra, nOfIntervals = 4)
data.tra <- SF.applyDecTable(wine.tra, cut.values)
data.tst <- SF.applyDecTable(wine.tst, cut.values)
## rule induction from the training set:
rules <- RI.LEM2Rules.RST(data.tra)
rules
## predicitons for the test set:
pred.vals <- predict(rules, data.tst)
## checking the accuracy of predictions:
#mean(pred.vals == true.classes)
confusionMatrix(pred.vals, true.classes)
###########################################################
## Example
##############################################################
library(RoughSets)
library(caret)
# get data file name argument
args <- commandArgs(TRUE)
data_name <- as.character(args[1])
# loading data to data frame
wine.data <- read.csv(data_name)
wine.data
## Split the data into a training set and a test set,
## 60\% for training and 40\% for testing:
idx <- round(0.8 * nrow(wine.data))
wine.tra <-SF.asDecisionTable(wine.data[1:idx,],
decision.attr = 5)
wine.tst <- SF.asDecisionTable(wine.data[(idx+1):nrow(wine.data), -ncol(wine.data)])
true.classes <- wine.data[(idx+1):nrow(wine.data), ncol(wine.data)]
## discretization:
cut.values <- D.discretize.equal.intervals.RST(wine.tra, nOfIntervals = 4)
data.tra <- SF.applyDecTable(wine.tra, cut.values)
data.tst <- SF.applyDecTable(wine.tst, cut.values)
## rule induction from the training set:
rules <- RI.LEM2Rules.RST(data.tra)
rules
## predicitons for the test set:
pred.vals <- predict(rules, data.tst)
## checking the accuracy of predictions:
#mean(pred.vals == true.classes)
confusionMatrix(pred.vals, true.classes)
###########################################################
## Example
##############################################################
library(RoughSets)
library(caret)
# get data file name argument
args <- commandArgs(TRUE)
data_name <- as.character(args[1])
# loading data to data frame
wine.data <- read.csv(data_name)
wine.data
## Split the data into a training set and a test set,
## 60\% for training and 40\% for testing:
idx <- round(0.8 * nrow(wine.data))
wine.tra <-SF.asDecisionTable(wine.data[1:idx,],
decision.attr = 5)
wine.tst <- SF.asDecisionTable(wine.data[(idx+1):nrow(wine.data), -ncol(wine.data)])
true.classes <- wine.data[(idx+1):nrow(wine.data), ncol(wine.data)]
## discretization:
cut.values <- D.discretize.equal.intervals.RST(wine.tra, nOfIntervals = 4)
data.tra <- SF.applyDecTable(wine.tra, cut.values)
data.tst <- SF.applyDecTable(wine.tst, cut.values)
## rule induction from the training set:
rules <- RI.LEM2Rules.RST(data.tra)
rules
## predicitons for the test set:
pred.vals <- predict(rules, data.tst)
## checking the accuracy of predictions:
#mean(pred.vals == true.classes)
confusionMatrix(pred.vals, true.classes)
###########################################################
## Example
##############################################################
library(RoughSets)
library(caret)
# get data file name argument
args <- commandArgs(TRUE)
data_name <- as.character(args[1])
# loading data to data frame
wine.data <- read.csv(data_name)
wine.data
## Split the data into a training set and a test set,
## 60\% for training and 40\% for testing:
idx <- round(0.8 * nrow(wine.data))
wine.tra <-SF.asDecisionTable(wine.data[1:idx,],
decision.attr = 5)
wine.tst <- SF.asDecisionTable(wine.data[(idx+1):nrow(wine.data), -ncol(wine.data)])
true.classes <- wine.data[(idx+1):nrow(wine.data), ncol(wine.data)]
## discretization:
cut.values <- D.discretize.equal.intervals.RST(wine.tra, nOfIntervals = 4)
data.tra <- SF.applyDecTable(wine.tra, cut.values)
data.tst <- SF.applyDecTable(wine.tst, cut.values)
## rule induction from the training set:
rules <- RI.LEM2Rules.RST(data.tra)
rules
## predicitons for the test set:
pred.vals <- predict(rules, data.tst)
## checking the accuracy of predictions:
#mean(pred.vals == true.classes)
confusionMatrix(pred.vals, true.classes)
library(RoughSets)
library(caret)
# get data file name argument
args <- commandArgs(TRUE)
data_name <- as.character(args[1])
# loading data to data frame
wine.data <- read.csv(data_name)
wine.data
## Split the data into a training set and a test set,
## 60\% for training and 40\% for testing:
idx <- round(0.8 * nrow(wine.data))
wine.tra <-SF.asDecisionTable(wine.data[1:idx,],
decision.attr = 5)
wine.tst <- SF.asDecisionTable(wine.data[(idx+1):nrow(wine.data), -ncol(wine.data)])
true.classes <- wine.data[(idx+1):nrow(wine.data), ncol(wine.data)]
## discretization:
cut.values <- D.discretize.equal.intervals.RST(wine.tra, nOfIntervals = 4)
data.tra <- SF.applyDecTable(wine.tra, cut.values)
data.tst <- SF.applyDecTable(wine.tst, cut.values)
## rule induction from the training set:
rules <- RI.LEM2Rules.RST(data.tra)
rules
library(RoughSets)
library(caret)
# get data file name argument
args <- commandArgs(TRUE)
data_name <- as.character(args[1])
# loading data to data frame
wine.data <- read.csv(data_name)
wine.data
## Split the data into a training set and a test set,
## 60\% for training and 40\% for testing:
idx <- round(0.8 * nrow(wine.data))
wine.tra <-SF.asDecisionTable(wine.data[1:idx,],
decision.attr = 5)
wine.tst <- SF.asDecisionTable(wine.data[(idx+1):nrow(wine.data), -ncol(wine.data)])
true.classes <- wine.data[(idx+1):nrow(wine.data), ncol(wine.data)]
## discretization:
cut.values <- D.discretize.equal.intervals.RST(wine.tra, nOfIntervals = 4)
data.tra <- SF.applyDecTable(wine.tra, cut.values)
data.tst <- SF.applyDecTable(wine.tst, cut.values)
## rule induction from the training set:
rules <- RI.LEM2Rules.RST(data.tra)
library(RoughSets)
library(caret)
# get data file name argument
args <- commandArgs(TRUE)
data_name <- as.character(args[1])
# loading data to data frame
wine.data <- read.csv(data_name)
wine.data
## Split the data into a training set and a test set,
## 60\% for training and 40\% for testing:
idx <- round(0.8 * nrow(wine.data))
wine.tra <-SF.asDecisionTable(wine.data[1:idx,],
decision.attr = 5)
wine.tst <- SF.asDecisionTable(wine.data[(idx+1):nrow(wine.data), -ncol(wine.data)])
true.classes <- wine.data[(idx+1):nrow(wine.data), ncol(wine.data)]
## discretization:
cut.values <- D.discretize.equal.intervals.RST(wine.tra, nOfIntervals = 4)
data.tra <- SF.applyDecTable(wine.tra, cut.values)
data.tst <- SF.applyDecTable(wine.tst, cut.values)
## rule induction from the training set:
rules <- RI.LEM2Rules.RST(data.tra)
library(RoughSets)
library(caret)
# get data file name argument
args <- commandArgs(TRUE)
data_name <- as.character(args[1])
# loading data to data frame
wine.data <- read.csv(data_name)
wine.data
## Split the data into a training set and a test set,
## 60\% for training and 40\% for testing:
idx <- round(0.8 * nrow(wine.data))
wine.tra <-SF.asDecisionTable(wine.data[1:idx,],
decision.attr = 5)
wine.tst <- SF.asDecisionTable(wine.data[(idx+1):nrow(wine.data), -ncol(wine.data)])
true.classes <- wine.data[(idx+1):nrow(wine.data), ncol(wine.data)]
## discretization:
cut.values <- D.discretize.equal.intervals.RST(wine.tra, nOfIntervals = 4)
data.tra <- SF.applyDecTable(wine.tra, cut.values)
data.tst <- SF.applyDecTable(wine.tst, cut.values)
## rule induction from the training set:
rules <- RI.LEM2Rules.RST(data.tra)
library(RoughSets)
library(caret)
# get data file name argument
args <- commandArgs(TRUE)
data_name <- as.character(args[1])
# loading data to data frame
wine.data <- read.csv(data_name)
wine.data
## Split the data into a training set and a test set,
## 60\% for training and 40\% for testing:
idx <- round(0.8 * nrow(wine.data))
wine.tra <-SF.asDecisionTable(wine.data[1:idx,],
decision.attr = 5)
wine.tst <- SF.asDecisionTable(wine.data[(idx+1):nrow(wine.data), -ncol(wine.data)])
true.classes <- wine.data[(idx+1):nrow(wine.data), ncol(wine.data)]
## discretization:
cut.values <- D.discretize.equal.intervals.RST(wine.tra, nOfIntervals = 4)
data.tra <- SF.applyDecTable(wine.tra, cut.values)
data.tst <- SF.applyDecTable(wine.tst, cut.values)
## rule induction from the training set:
rules <- RI.LEM2Rules.RST(data.tra)
rules
## predicitons for the test set:
pred.vals <- predict(rules, data.tst)
## checking the accuracy of predictions:
#mean(pred.vals == true.classes)
confusionMatrix(pred.vals, true.classes)
source('~/OneDrive - KNOREX/sma_2017/roughset_demo/RI.LEM2Rules.RST.R', echo=TRUE)
###########################################################
## Example
##############################################################
library(RoughSets)
library(caret)
# get data file name argument
args <- commandArgs(TRUE)
data_name <- as.character(args[1])
# loading data to data frame
wine.data <- read.csv(data_name)
wine.data
## Split the data into a training set and a test set,
## 60\% for training and 40\% for testing:
idx <- round(0.8 * nrow(wine.data))
wine.tra <-SF.asDecisionTable(wine.data[1:idx,],
decision.attr = 5)
wine.tst <- SF.asDecisionTable(wine.data[(idx+1):nrow(wine.data), -ncol(wine.data)])
true.classes <- wine.data[(idx+1):nrow(wine.data), ncol(wine.data)]
## discretization:
cut.values <- D.discretize.equal.intervals.RST(wine.tra, nOfIntervals = 4)
data.tra <- SF.applyDecTable(wine.tra, cut.values)
data.tst <- SF.applyDecTable(wine.tst, cut.values)
## rule induction from the training set:
rules <- RI.LEM2Rules.RST(data.tra)
rules
## predicitons for the test set:
pred.vals <- predict(rules, data.tst)
## checking the accuracy of predictions:
#mean(pred.vals == true.classes)
confusionMatrix(pred.vals, true.classes)
###########################################################
## Example
##############################################################
library(RoughSets)
library(caret)
# get data file name argument
args <- commandArgs(TRUE)
data_name <- as.character(args[1])
# loading data to data frame
wine.data <- read.csv(data_name)
wine.data
## Split the data into a training set and a test set,
## 60\% for training and 40\% for testing:
idx <- round(0.8 * nrow(wine.data))
wine.tra <-SF.asDecisionTable(wine.data[1:idx,],
decision.attr = 5)
wine.tst <- SF.asDecisionTable(wine.data[(idx+1):nrow(wine.data), -ncol(wine.data)])
true.classes <- wine.data[(idx+1):nrow(wine.data), ncol(wine.data)]
## discretization:
cut.values <- D.discretize.equal.intervals.RST(wine.tra, nOfIntervals = 4)
data.tra <- SF.applyDecTable(wine.tra, cut.values)
data.tst <- SF.applyDecTable(wine.tst, cut.values)
## rule induction from the training set:
rules <- RI.LEM2Rules.RST(data.tra)
rules
## predicitons for the test set:
pred.vals <- predict(rules, data.tst)
## checking the accuracy of predictions:
#mean(pred.vals == true.classes)
confusionMatrix(pred.vals, true.classes)
###########################################################
## Example
##############################################################
library(RoughSets)
library(caret)
# get data file name argument
args <- commandArgs(TRUE)
data_name <- as.character(args[1])
# loading data to data frame
wine.data <- read.csv(data_name)
wine.data
## Split the data into a training set and a test set,
## 60\% for training and 40\% for testing:
idx <- round(0.8 * nrow(wine.data))
wine.tra <-SF.asDecisionTable(wine.data[1:idx,],
decision.attr = 5)
wine.tst <- SF.asDecisionTable(wine.data[(idx+1):nrow(wine.data), -ncol(wine.data)])
true.classes <- wine.data[(idx+1):nrow(wine.data), ncol(wine.data)]
## discretization:
cut.values <- D.discretize.equal.intervals.RST(wine.tra, nOfIntervals = 4)
data.tra <- SF.applyDecTable(wine.tra, cut.values)
data.tst <- SF.applyDecTable(wine.tst, cut.values)
## rule induction from the training set:
rules <- RI.LEM2Rules.RST(data.tra)
rules
## predicitons for the test set:
pred.vals <- predict(rules, data.tst)
## checking the accuracy of predictions:
#mean(pred.vals == true.classes)
confusionMatrix(pred.vals, true.classes)
###########################################################
## Example
##############################################################
library(RoughSets)
library(caret)
# get data file name argument
args <- commandArgs(TRUE)
data_name <- as.character(args[1])
# loading data to data frame
wine.data <- read.csv(data_name)
wine.data
## Split the data into a training set and a test set,
## 60\% for training and 40\% for testing:
idx <- round(0.8 * nrow(wine.data))
wine.tra <-SF.asDecisionTable(wine.data[1:idx,],
decision.attr = 5)
wine.tst <- SF.asDecisionTable(wine.data[(idx+1):nrow(wine.data), -ncol(wine.data)])
true.classes <- wine.data[(idx+1):nrow(wine.data), ncol(wine.data)]
## discretization:
cut.values <- D.discretize.equal.intervals.RST(wine.tra, nOfIntervals = 4)
data.tra <- SF.applyDecTable(wine.tra, cut.values)
data.tst <- SF.applyDecTable(wine.tst, cut.values)
## rule induction from the training set:
rules <- RI.LEM2Rules.RST(data.tra)
rules
## predicitons for the test set:
pred.vals <- predict(rules, data.tst)
## checking the accuracy of predictions:
#mean(pred.vals == true.classes)
confusionMatrix(pred.vals, true.classes)
###########################################################
## Example
##############################################################
library(RoughSets)
library(caret)
# get data file name argument
args <- commandArgs(TRUE)
data_name <- as.character(args[1])
# loading data to data frame
wine.data <- read.csv(data_name)
wine.data
## Split the data into a training set and a test set,
## 60\% for training and 40\% for testing:
idx <- round(0.8 * nrow(wine.data))
wine.tra <-SF.asDecisionTable(wine.data[1:idx,],
decision.attr = 5)
wine.tst <- SF.asDecisionTable(wine.data[(idx+1):nrow(wine.data), -ncol(wine.data)])
true.classes <- wine.data[(idx+1):nrow(wine.data), ncol(wine.data)]
## discretization:
cut.values <- D.discretize.equal.intervals.RST(wine.tra, nOfIntervals = 4)
data.tra <- SF.applyDecTable(wine.tra, cut.values)
data.tst <- SF.applyDecTable(wine.tst, cut.values)
## rule induction from the training set:
rules <- RI.LEM2Rules.RST(data.tra)
rules
## predicitons for the test set:
pred.vals <- predict(rules, data.tst)
## checking the accuracy of predictions:
#mean(pred.vals == true.classes)
confusionMatrix(pred.vals, true.classes)
###########################################################
## Example
##############################################################
library(RoughSets)
library(caret)
# get data file name argument
args <- commandArgs(TRUE)
data_name <- as.character(args[1])
# loading data to data frame
wine.data <- read.csv(data_name)
wine.data
## Split the data into a training set and a test set,
## 60\% for training and 40\% for testing:
idx <- round(0.8 * nrow(wine.data))
wine.tra <-SF.asDecisionTable(wine.data[1:idx,],
decision.attr = 5)
wine.tst <- SF.asDecisionTable(wine.data[(idx+1):nrow(wine.data), -ncol(wine.data)])
true.classes <- wine.data[(idx+1):nrow(wine.data), ncol(wine.data)]
## discretization:
cut.values <- D.discretize.equal.intervals.RST(wine.tra, nOfIntervals = 4)
data.tra <- SF.applyDecTable(wine.tra, cut.values)
data.tst <- SF.applyDecTable(wine.tst, cut.values)
## rule induction from the training set:
rules <- RI.LEM2Rules.RST(data.tra)
rules
## predicitons for the test set:
pred.vals <- predict(rules, data.tst)
## checking the accuracy of predictions:
#mean(pred.vals == true.classes)
confusionMatrix(pred.vals, true.classes)
